package simpledb;

import java.util.*;
import java.io.*;

/**
 * HeapPage stores pages of HeapFiles and implements the Page interface that
 * is used by BufferPool.
 *
 * @see HeapFile
 * @see BufferPool
 */
public class HeapPage implements Page {

    HeapPageId pid;
    TupleDesc td;
    byte header[];
    Tuple tuples[];
    int numSlots;
    TransactionId dirtier;

    byte[] oldData;

    /**
     * Create a HeapPage from a set of bytes of data read from disk.
     * The format of a HeapPage is a set of header bytes indicating
     * the slots of the page that are in use, some number of tuple slots.
     *  Specifically, the number of tuples is equal to: <p>
     *          floor((BufferPool.PAGE_SIZE*8) / (tuple size * 8 + 1))
     * <p> where tuple size is the size of tuples in this
     * database table, which can be determined via {@link Catalog#getTupleDesc}.
     * The number of 8-bit header words is equal to:
     * <p>
     *      ceiling(no. tuple slots / 8)
     * <p>
     * @throws Exception 
     * @see Database#getCatalog
     * @see Catalog#getTupleDesc
     * @see BufferPool#PAGE_SIZE
     */
    public HeapPage(HeapPageId id, byte[] data) throws IOException {
        this.pid = id;
        this.td = Database.getCatalog().getTupleDesc(id.getTableId());
        this.numSlots = getNumTuples();
        this.oldData = new byte[BufferPool.PAGE_SIZE];
        DataInputStream dis = new DataInputStream(new ByteArrayInputStream(data));

        // allocate and read the header slots of this page
        header = new byte[getHeaderSize()];
        for (int i=0; i<header.length; i++)
            header[i] = dis.readByte();

        try{
            // allocate and read the actual records of this page
            tuples = new Tuple[numSlots];
            for (int i=0; i<tuples.length; i++)
                tuples[i] = readNextTuple(dis,i);
        }catch(NoSuchElementException e){
            e.printStackTrace();
        }
        dis.close();

        setBeforeImage();
    }

    /** Retrieve the number of tuples on this page.
        @return the number of tuples on this page
    */
    private int getNumTuples() {        
    	return (int) Math.floor((BufferPool.PAGE_SIZE * 8) / (this.td.getSize() * 8 + 1));
    }

    /**
     * Computes the number of bytes in the header of a page in a HeapFile with each tuple occupying tupleSize bytes
     * @return the number of bytes in the header of a page in a HeapFile with each tuple occupying tupleSize bytes
     */
    private int getHeaderSize() {
    	return (int) Math.ceil(getNumTuples() / 8.0);
    }
    
    /** Return a view of this page before it was modified
        -- used by recovery 
     * @throws Exception */
    public HeapPage getBeforeImage() {
        try {
            return new HeapPage(pid,oldData);
        } catch (IOException e) {
            e.printStackTrace();
            //should never happen -- we parsed it OK before!
            System.exit(1);
        }
        return null;
    }
    
    public void setBeforeImage() {
    	try {
    		oldData = getPageData().clone();
    	} catch(Exception e) {
    		e.printStackTrace();
    		System.exit(1);
    	}
    }

    /**
     * @return the PageId associated with this page.
     */
    public HeapPageId getId() {
    	return pid;
    }

    /**
     * Suck up tuples from the source file.
     * @throws Exception 
     */
    private Tuple readNextTuple(DataInputStream dis, int slotId) {
        // if associated bit is not set, read forward to the next tuple, and
        // return null.
        if (!getSlot(slotId)) {
            for (int i=0; i<td.getSize(); i++) {
                try {
                    dis.readByte();
                } catch (IOException e) {
                    throw new NoSuchElementException("error reading empty tuple");
                }
            }
            return null;
        }

        // read fields in the tuple
        Tuple t = new Tuple(td);
        RecordId rid = new RecordId(pid, slotId);
        t.setRecordId(rid);
        try {
            for (int j=0; j<td.numFields(); j++) {
                Field f = td.getType(j).parse(dis);
                t.setField(j, f);
            }
        } catch (java.text.ParseException e) {
            e.printStackTrace();
            throw new NoSuchElementException("parsing error!");
        }

        return t;
    }

    /**
     * Generates a byte array representing the contents of this page.
     * Used to serialize this page to disk.
     * <p>
     * The invariant here is that it should be possible to pass the byte
     * array generated by getPageData to the HeapPage constructor and
     * have it produce an identical HeapPage object.
     *
     * @see #HeapPage
     * @return A byte array correspond to the bytes of this page.
     * @throws Exception 
     */
    public byte[] getPageData() {
        int len = BufferPool.PAGE_SIZE;
        ByteArrayOutputStream baos = new ByteArrayOutputStream(len);
        DataOutputStream dos = new DataOutputStream(baos);

        // create the header of the page
        for (int i=0; i<header.length; i++) {
            try {
                dos.writeByte(header[i]);
            } catch (IOException e) {
                // this really shouldn't happen
                e.printStackTrace();
            }
        }

        // create the tuples
        for (int i=0; i<tuples.length; i++) {

            // empty slot
            if (!getSlot(i)) {
                for (int j=0; j<td.getSize(); j++) {
                    try {
                        dos.writeByte(0);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                }
                continue;
            }

            // non-empty slot
            for (int j=0; j<td.numFields(); j++) {
                try {
                	Field f = tuples[i].getField(j);
                    f.serialize(dos);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        // padding
        int zerolen = BufferPool.PAGE_SIZE - (header.length + td.getSize() * tuples.length); //- numSlots * td.getSize();
        byte[] zeroes = new byte[zerolen];
        try {
            dos.write(zeroes, 0, zerolen);
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            dos.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return baos.toByteArray();
    }

    /**
     * Static method to generate a byte array corresponding to an empty
     * HeapPage.
     * Used to add new, empty pages to the file. Passing the results of
     * this method to the HeapPage constructor will create a HeapPage with
     * no valid tuples in it.
     *
     * @param tableid The id of the table that this empty page will belong to.
     * @return The returned ByteArray.
     */
    public static byte[] createEmptyPageData() {
        int len = BufferPool.PAGE_SIZE;
        return new byte[len]; //all 0
    }

    public Tuple tupleSeek(int slot) {
        assert getSlot(slot);
        return tuples[slot];
    }

    /**
     * Delete the specified tuple from the page;  the tuple should be updated to reflect
     *   that it is no longer stored on any page.
     * @throws DbException if this tuple is not on this page, or tuple slot is
     *         already empty.
     * @param t The tuple to delete
     */
    public void deleteTuple(Tuple t) throws DbException {
        if(t.getRecordId() == null)
            throw new DbException("This tuple has already been deleted");
        PageId t_pid = t.getRecordId().getPageId();
        int t_tupleno = t.getRecordId().tupleno();
        if(!pid.equals(t_pid))
            throw new DbException(String.format("Tuple is not on page %s", pid.toString()));
        if(!getSlot(t_tupleno))
            throw new DbException(String.format("No tuple at index %d in page %s", t_tupleno, pid.toString()));

        setSlot(t.getRecordId().tupleno(), false);
        t.setRecordId(null);
    }

    /**
     * Adds the specified tuple to the page;  the tuple should be updated to reflect
     *  that it is now stored on this page.
     * @throws DbException if the page is full (no empty slots) or tupledesc
     *         is mismatch.
     * @param t The tuple to add.
     */
    public void addTuple(Tuple t) throws DbException {
        if (!t.getTupleDesc().equals(td))
            throw new DbException("Tuple being added does not have the same tupledesc as this page");
        if (getNumEmptySlots() == 0)
            throw new DbException("No space left on this page");

        // find first empty slot
        byte full = (byte) 0xFF;
        int firstEmpty = -1;
        for (int x = 0; x < header.length; x++) {
            if (header[x] != full) {
                int startIndex = 8 * x;
                for (int y = startIndex; y < startIndex + 8; y++)
                    if (!getSlot(y)) {
                        firstEmpty = y;
                        break;
                    }
            }
        }

        setSlot(firstEmpty, true);
        tuples[firstEmpty] = t;
        t.setRecordId(new RecordId(pid, firstEmpty));
    }

    /**
     * Marks this page as dirty/not dirty and record that transaction
     * that did the dirtying
     */
    public void markDirty(boolean dirty, TransactionId tid) {
        if(dirty)
            dirtier = tid;
        else
            dirtier = null;
    }

    /**
     * Returns the tid of the transaction that last dirtied this page, or null if the page is not dirty
     */
    public TransactionId isDirty() {
        return dirtier;
    }


    /**
     * Returns the number of empty slots on this page.
     */
    public int getNumEmptySlots() {
    	int usedSlots = 0;
    	for(int x=0; x<header.length; x++) {
    		int mask = 1;
    		byte b = header[x];
    		for(int y=0; y<8; y++) {
    			if((b & mask) != 0)
    				usedSlots++;
    			mask = mask << 1;
    		}
    	}
    	return numSlots - usedSlots;
    }

    /**
     * Returns true if associated slot on this page is filled.
     */
    public boolean getSlot(int i) {
    	int byteIndex = i/8;
    	int bitOffset = i % 8;
    	int bitMask = 1 << bitOffset;
    	return (header[byteIndex] & bitMask) != 0;
    }

    /**
     * Abstraction to fill or clear a slot on this page.
     */
    private void setSlot(int i, boolean value) {
        int byteIndex = i/8;
        int bitOffset = i % 8;
        byte bitMask = (byte) ~(1 << bitOffset);
        byte bitValue = (byte) (value ? 1 : 0);
        header[byteIndex] = (byte) ((header[byteIndex] & bitMask) | (bitValue << bitOffset));
    }

    /**
     * @return an iterator over all tuples on this page (calling remove on this iterator throws an UnsupportedOperationException)
     * (note that this iterator shouldn't return tuples in empty slots!)
     */
    public Iterator<Tuple> iterator() {
    	ArrayList<Tuple> iteratorList = new ArrayList<Tuple>();
    	for(int x=0; x<tuples.length; x++)
    	    if(getSlot(x) && tuples[x] != null)
    	        iteratorList.add(tuples[x]);

    	return iteratorList.iterator();
    }

}

